@page "/account/forgot-password"
@using Blazor.Application.Interfaces
@using Blazor.Application.Users.Commands.ResetPassword
@using Blazor.Infrastructure.JWT
@using BlazorTemplate.Models.Authentication
@using System.Security.Claims
@using FluentEmail.Core.Models

@attribute [AllowAnonymous]

<MudForm Model="@_formModel" @ref="@_form" @bind-IsValid="@_success" ValidationDelay="0" Validation="@(ForgotPasswordValidator.ValidateValue)">
    <MudText Typo="Typo.h4" GutterBottom="true">Forgot password</MudText>
    <MudText Typo="Typo.subtitle2">Enter the email address linked to your account and you will receive an email containing a link to reset your password.</MudText>
    <MudTextField @bind-Value="_formModel.Email" For="@(() => _formModel.Email)"
                  Variant="Variant.Outlined"
                  Label="Email"
                  Required="true"
                  OnlyValidateIfDirty="true"
                  Immediate="true"
                  Class="my-6">
    </MudTextField>   
    <MudButton Variant="Variant.Filled"
               Color="Color.Primary"
               Size="Size.Large"
               Disabled="@(_loading)"
               ButtonType="ButtonType.Button"
               OnClick="@(OnSubmitAsync)"
               Class="mt-8"
               FullWidth="true">
        @if (_loading)
        {
            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
            <MudText Class="ms-2"> Loading</MudText>
        }
        else
        {
            <MudText>Reset password</MudText>
        }

    </MudButton>
</MudForm>

@code { 
    [Inject]
    private ForgotPasswordFormModelValidator ForgotPasswordValidator { get; set; } = null!;

    private MudForm? _form;

    private ForgotPasswordFormModel _formModel = new();

    private bool _success;

    private bool _loading;

    public async Task OnSubmitAsync()
    {
        try
        {
            _loading = true;

            await _form!.Validate();

            if (_form!.IsValid == false)
                return;

            Result result = await SendResetPasswordEmail();
            if (result.IsSuccess)
                HandleSuccess();
            else
                HandleError(result);
        }
        catch (Exception ex)
        {
            HandleError(Result.Fail(ex.Message));
        }
        finally
        {
            _loading = false;
        }
    }


    private async Task<Result> SendResetPasswordEmail()
    {        
        Uri validationUrl = new Uri(new Uri(NavigationManager.BaseUri), $"account/reset-password/");

        return await Mediator.Send(new ForgotPasswordCommand(_formModel.Email!, validationUrl.ToString()));
    }



    private void HandleSuccess()
    {
        Snackbar.Add("The email has been sent, please check the email", MudBlazor.Severity.Info);        
    }


    private void HandleError(Result result)
    {
        Snackbar.Add(result.Errors.First().Message, MudBlazor.Severity.Error);
    }
}
