@page "/account/reset-password/{Token}"

@attribute [AllowAnonymous]

<MudForm Model="@_formModel" @ref="@_form" @bind-IsValid="@_success" ValidationDelay="0" Validation="@(ResetPasswordValidator.ValidateValue)">
    <MudText Typo="Typo.h4" GutterBottom="true">Reset password</MudText>

    <MudText Typo="Typo.h4" GutterBottom="true">@_email</MudText>

    <MudTextField @bind-Value="_formModel.NewPassword" For="@(() => _formModel.NewPassword)"
                  Variant="Variant.Outlined"
                  InputType="@_passwordInput"
                  Label="Password"
                  Required="true">
    </MudTextField>
    <MudTextField @bind-Value="_formModel.ConfirmPassword" For="@(() => _formModel.ConfirmPassword)"
                  Variant="Variant.Outlined"
                  InputType="@_confirmPasswordInput"
                  Label="Confirm password"
                  Required="true">
    </MudTextField>

    <MudButton Variant="Variant.Filled"
               Color="Color.Primary"
               Size="Size.Large"
               Disabled="@(_loading)"
               ButtonType="ButtonType.Button"
               OnClick="@(OnSubmitAsync)"
               Class="mt-8"
               FullWidth="true">
        @if (_loading)
        {
            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
            <MudText Class="ms-2"> Loading</MudText>
        }
        else
        {
            <MudText>Submit</MudText>
        }

    </MudButton>
</MudForm>

@code {
    [Parameter]
    public string Token { get; set; } = string.Empty;

    [Inject]
    private ResetPasswordFormModelValidator ResetPasswordValidator { get; set; } = null!;

    [Inject]
    private TokenValidatorService TokenValidator { get; set; } = null!;

    [Inject]
    private ILogger<ResetPassword> Logger { get; set; } = null!;

    [Inject]
    private IDialogService DialogService { get; set; } = null!;

    private string? _email;

    private InputType _passwordInput = InputType.Password;

    private InputType _confirmPasswordInput = InputType.Password;

    private MudForm? _form;

    private ResetPasswordFormModel _formModel = new();

    private bool _loading;

    private bool _success;

    private UserDto? _user = null!;

    protected async override Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        Result<ClaimsIdentity> resultToken = await TokenValidator.ValidateForgotPasswordTokenAsync(Token);
        if (resultToken.IsFailed)
        {
            ShowMessageBox("Invalid or expired token!", "Error");
            NavigationManager.NavigateTo("/");
            return;
        }

        ClaimsIdentity claims = new(resultToken.Value.Claims);
        _email = claims.FindFirst(ClaimTypes.Email)!.Value;

        Result<UserDto> resultUser = await Mediator.Send(new GetUserByEmailQuery(_email));
        if (resultUser.IsFailed)
        {
            ShowMessageBox("User was not found!", "Error");
            NavigationManager.NavigateTo("/");
            return;
        }
        else
            _user = resultUser.Value;
    }


    private async void ShowMessageBox(string message, string title)
    {
        bool? result = await DialogService.ShowMessageBox(title, message, yesText: "Ok");
    }


    public async Task OnSubmitAsync()
    {
        try
        {
            _loading = true;

            await _form!.Validate();

            if (_form!.IsValid == false)
                return;

            Result result = await ResetPasswordAsync();

            if (result.IsSuccess)
                HandleSuccess();
            else
                HandleError(result);
        }
        catch (Exception ex)
        {
            HandleError(Result.Fail(ex.Message));
        }
        finally
        {
            _loading = false;
        }
    }


    private async Task<Result> ResetPasswordAsync()
    {
        Logger.LogInformation("User '{userName}' reset his password", _user!.Name);

        return await Mediator.Send(new ResetPasswordCommand(_user.Id, _formModel.NewPassword));
    }


    private void HandleSuccess()
    {
        Snackbar.Add("Password updated with success!", MudBlazor.Severity.Info);        
        NavigationManager.NavigateTo("/account/login");
    }


    private void HandleError(Result result)
    {
        Snackbar.Add(result.Errors.First().Message, MudBlazor.Severity.Error);
    }
}
