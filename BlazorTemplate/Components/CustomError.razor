<MudDialog IsVisible="true">
    <TitleContent>
        <MudText Typo="Typo.h6" Color="Color.Error"> @StatusCode </MudText>
        </TitleContent>
        <DialogContent>
            <div Class="px-6 rounded-lg d-flex flex-column">
                <MudIcon Icon="@Icons.Material.Filled.ErrorOutline" Class="pb-4" Style="height:100px;width:100px;margin:auto" Color="Color.Warning" />

                <div class="d-flex align-center gap-4">
                    <MudText Typo="Typo.subtitle2">@Message</MudText>
                    <MudText Typo="Typo.subtitle2">@DateTime.Now</MudText>
                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(() => ShowStackTrace = !ShowStackTrace)">More</MudButton>
                </div>
                <MudText>@Message For more information, contact your system administrator</MudText>
            @if (ShowStackTrace)
            {
                <MudText Typo="Typo.body2" Class="mt-2">@StackTrace</MudText>
            }
            <MudDivider Class="my-3" />
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Outlined" Color="Color.Default" OnClick="OnRefresh">Refresh</MudButton>
        </DialogActions>
    </MudDialog>

@code
{
    [EditorRequired]
    [Parameter]
    public Exception Exception { get; set; } = default!;

    [Inject]
    private ILogger<CustomError> Logger { get; set; } = null!;

    [CascadingParameter] 
    private Task<AuthenticationState> AuthState { get; set; } = default!;
    
    private string? Message { get; set; }

    private bool ShowStackTrace { get; set; }

    private string? StackTrace { get; set; }

    private string? StatusCode { get; set; } = HttpStatusCode.InternalServerError.ToString();

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState state = await AuthState;
        string userName = state.User.GetUserName() ?? "";

        if (Exception.InnerException != null)
        {
            while (Exception.InnerException != null)
            {
                Exception = Exception.InnerException;
            }
        }

        Message = Exception.Message;

        StackTrace = Exception.StackTrace;
        Logger.LogError(Exception, "{Message}. Request url: {@url} {@UserName}", Message, NavigationManager.Uri, userName);
    }


    private void OnRefresh()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }
}